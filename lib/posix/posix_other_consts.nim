# Generated by detect.nim

# <aio.h>
var AIO_ALLDONE* {.importc: "AIO_ALLDONE", header: "<aio.h>".}: cint
var AIO_CANCELED* {.importc: "AIO_CANCELED", header: "<aio.h>".}: cint
var AIO_NOTCANCELED* {.importc: "AIO_NOTCANCELED", header: "<aio.h>".}: cint
var LIO_NOP* {.importc: "LIO_NOP", header: "<aio.h>".}: cint
var LIO_NOWAIT* {.importc: "LIO_NOWAIT", header: "<aio.h>".}: cint
var LIO_READ* {.importc: "LIO_READ", header: "<aio.h>".}: cint
var LIO_WAIT* {.importc: "LIO_WAIT", header: "<aio.h>".}: cint
var LIO_WRITE* {.importc: "LIO_WRITE", header: "<aio.h>".}: cint

# <dlfcn.h>
var RTLD_LAZY* {.importc: "RTLD_LAZY", header: "<dlfcn.h>".}: cint
var RTLD_NOW* {.importc: "RTLD_NOW", header: "<dlfcn.h>".}: cint
var RTLD_GLOBAL* {.importc: "RTLD_GLOBAL", header: "<dlfcn.h>".}: cint
var RTLD_LOCAL* {.importc: "RTLD_LOCAL", header: "<dlfcn.h>".}: cint

# <errno.h>
var E2BIG* {.importc: "E2BIG", header: "<errno.h>".}: cint
var EACCES* {.importc: "EACCES", header: "<errno.h>".}: cint
var EADDRINUSE* {.importc: "EADDRINUSE", header: "<errno.h>".}: cint
var EADDRNOTAVAIL* {.importc: "EADDRNOTAVAIL", header: "<errno.h>".}: cint
var EAFNOSUPPORT* {.importc: "EAFNOSUPPORT", header: "<errno.h>".}: cint
var EAGAIN* {.importc: "EAGAIN", header: "<errno.h>".}: cint
var EALREADY* {.importc: "EALREADY", header: "<errno.h>".}: cint
var EBADF* {.importc: "EBADF", header: "<errno.h>".}: cint
var EBADMSG* {.importc: "EBADMSG", header: "<errno.h>".}: cint
var EBUSY* {.importc: "EBUSY", header: "<errno.h>".}: cint
var ECANCELED* {.importc: "ECANCELED", header: "<errno.h>".}: cint
var ECHILD* {.importc: "ECHILD", header: "<errno.h>".}: cint
var ECONNABORTED* {.importc: "ECONNABORTED", header: "<errno.h>".}: cint
var ECONNREFUSED* {.importc: "ECONNREFUSED", header: "<errno.h>".}: cint
var ECONNRESET* {.importc: "ECONNRESET", header: "<errno.h>".}: cint
var EDEADLK* {.importc: "EDEADLK", header: "<errno.h>".}: cint
var EDESTADDRREQ* {.importc: "EDESTADDRREQ", header: "<errno.h>".}: cint
var EDOM* {.importc: "EDOM", header: "<errno.h>".}: cint
var EDQUOT* {.importc: "EDQUOT", header: "<errno.h>".}: cint
var EEXIST* {.importc: "EEXIST", header: "<errno.h>".}: cint
var EFAULT* {.importc: "EFAULT", header: "<errno.h>".}: cint
var EFBIG* {.importc: "EFBIG", header: "<errno.h>".}: cint
var EHOSTUNREACH* {.importc: "EHOSTUNREACH", header: "<errno.h>".}: cint
var EIDRM* {.importc: "EIDRM", header: "<errno.h>".}: cint
var EILSEQ* {.importc: "EILSEQ", header: "<errno.h>".}: cint
var EINPROGRESS* {.importc: "EINPROGRESS", header: "<errno.h>".}: cint
var EINTR* {.importc: "EINTR", header: "<errno.h>".}: cint
var EINVAL* {.importc: "EINVAL", header: "<errno.h>".}: cint
var EIO* {.importc: "EIO", header: "<errno.h>".}: cint
var EISCONN* {.importc: "EISCONN", header: "<errno.h>".}: cint
var EISDIR* {.importc: "EISDIR", header: "<errno.h>".}: cint
var ELOOP* {.importc: "ELOOP", header: "<errno.h>".}: cint
var EMFILE* {.importc: "EMFILE", header: "<errno.h>".}: cint
var EMLINK* {.importc: "EMLINK", header: "<errno.h>".}: cint
var EMSGSIZE* {.importc: "EMSGSIZE", header: "<errno.h>".}: cint
var EMULTIHOP* {.importc: "EMULTIHOP", header: "<errno.h>".}: cint
var ENAMETOOLONG* {.importc: "ENAMETOOLONG", header: "<errno.h>".}: cint
var ENETDOWN* {.importc: "ENETDOWN", header: "<errno.h>".}: cint
var ENETRESET* {.importc: "ENETRESET", header: "<errno.h>".}: cint
var ENETUNREACH* {.importc: "ENETUNREACH", header: "<errno.h>".}: cint
var ENFILE* {.importc: "ENFILE", header: "<errno.h>".}: cint
var ENOBUFS* {.importc: "ENOBUFS", header: "<errno.h>".}: cint
var ENODATA* {.importc: "ENODATA", header: "<errno.h>".}: cint
var ENODEV* {.importc: "ENODEV", header: "<errno.h>".}: cint
var ENOENT* {.importc: "ENOENT", header: "<errno.h>".}: cint
var ENOEXEC* {.importc: "ENOEXEC", header: "<errno.h>".}: cint
var ENOLCK* {.importc: "ENOLCK", header: "<errno.h>".}: cint
var ENOLINK* {.importc: "ENOLINK", header: "<errno.h>".}: cint
var ENOMEM* {.importc: "ENOMEM", header: "<errno.h>".}: cint
var ENOMSG* {.importc: "ENOMSG", header: "<errno.h>".}: cint
var ENOPROTOOPT* {.importc: "ENOPROTOOPT", header: "<errno.h>".}: cint
var ENOSPC* {.importc: "ENOSPC", header: "<errno.h>".}: cint
var ENOSR* {.importc: "ENOSR", header: "<errno.h>".}: cint
var ENOSTR* {.importc: "ENOSTR", header: "<errno.h>".}: cint
var ENOSYS* {.importc: "ENOSYS", header: "<errno.h>".}: cint
var ENOTCONN* {.importc: "ENOTCONN", header: "<errno.h>".}: cint
var ENOTDIR* {.importc: "ENOTDIR", header: "<errno.h>".}: cint
var ENOTEMPTY* {.importc: "ENOTEMPTY", header: "<errno.h>".}: cint
var ENOTSOCK* {.importc: "ENOTSOCK", header: "<errno.h>".}: cint
var ENOTSUP* {.importc: "ENOTSUP", header: "<errno.h>".}: cint
var ENOTTY* {.importc: "ENOTTY", header: "<errno.h>".}: cint
var ENXIO* {.importc: "ENXIO", header: "<errno.h>".}: cint
var EOPNOTSUPP* {.importc: "EOPNOTSUPP", header: "<errno.h>".}: cint
var EOVERFLOW* {.importc: "EOVERFLOW", header: "<errno.h>".}: cint
var EPERM* {.importc: "EPERM", header: "<errno.h>".}: cint
var EPIPE* {.importc: "EPIPE", header: "<errno.h>".}: cint
var EPROTO* {.importc: "EPROTO", header: "<errno.h>".}: cint
var EPROTONOSUPPORT* {.importc: "EPROTONOSUPPORT", header: "<errno.h>".}: cint
var EPROTOTYPE* {.importc: "EPROTOTYPE", header: "<errno.h>".}: cint
var ERANGE* {.importc: "ERANGE", header: "<errno.h>".}: cint
var EROFS* {.importc: "EROFS", header: "<errno.h>".}: cint
var ESPIPE* {.importc: "ESPIPE", header: "<errno.h>".}: cint
var ESRCH* {.importc: "ESRCH", header: "<errno.h>".}: cint
var ESTALE* {.importc: "ESTALE", header: "<errno.h>".}: cint
var ETIME* {.importc: "ETIME", header: "<errno.h>".}: cint
var ETIMEDOUT* {.importc: "ETIMEDOUT", header: "<errno.h>".}: cint
var ETXTBSY* {.importc: "ETXTBSY", header: "<errno.h>".}: cint
var EWOULDBLOCK* {.importc: "EWOULDBLOCK", header: "<errno.h>".}: cint
var EXDEV* {.importc: "EXDEV", header: "<errno.h>".}: cint

# <fcntl.h>
var F_DUPFD* {.importc: "F_DUPFD", header: "<fcntl.h>".}: cint
var F_DUPFD_CLOEXEC* {.importc: "F_DUPFD", header: "<fcntl.h>".}: cint
var F_GETFD* {.importc: "F_GETFD", header: "<fcntl.h>".}: cint
var F_SETFD* {.importc: "F_SETFD", header: "<fcntl.h>".}: cint
var F_GETFL* {.importc: "F_GETFL", header: "<fcntl.h>".}: cint
var F_SETFL* {.importc: "F_SETFL", header: "<fcntl.h>".}: cint
var F_GETLK* {.importc: "F_GETLK", header: "<fcntl.h>".}: cint
var F_SETLK* {.importc: "F_SETLK", header: "<fcntl.h>".}: cint
var F_SETLKW* {.importc: "F_SETLKW", header: "<fcntl.h>".}: cint
var F_GETOWN* {.importc: "F_GETOWN", header: "<fcntl.h>".}: cint
var F_SETOWN* {.importc: "F_SETOWN", header: "<fcntl.h>".}: cint
var FD_CLOEXEC* {.importc: "FD_CLOEXEC", header: "<fcntl.h>".}: cint
var F_RDLCK* {.importc: "F_RDLCK", header: "<fcntl.h>".}: cint
var F_UNLCK* {.importc: "F_UNLCK", header: "<fcntl.h>".}: cint
var F_WRLCK* {.importc: "F_WRLCK", header: "<fcntl.h>".}: cint
var O_CREAT* {.importc: "O_CREAT", header: "<fcntl.h>".}: cint
var O_EXCL* {.importc: "O_EXCL", header: "<fcntl.h>".}: cint
var O_NOCTTY* {.importc: "O_NOCTTY", header: "<fcntl.h>".}: cint
var O_TRUNC* {.importc: "O_TRUNC", header: "<fcntl.h>".}: cint
var O_APPEND* {.importc: "O_APPEND", header: "<fcntl.h>".}: cint
var O_DSYNC* {.importc: "O_DSYNC", header: "<fcntl.h>".}: cint
var O_NONBLOCK* {.importc: "O_NONBLOCK", header: "<fcntl.h>".}: cint
var O_RSYNC* {.importc: "O_RSYNC", header: "<fcntl.h>".}: cint
var O_SYNC* {.importc: "O_SYNC", header: "<fcntl.h>".}: cint
var O_ACCMODE* {.importc: "O_ACCMODE", header: "<fcntl.h>".}: cint
var O_RDONLY* {.importc: "O_RDONLY", header: "<fcntl.h>".}: cint
var O_RDWR* {.importc: "O_RDWR", header: "<fcntl.h>".}: cint
var O_WRONLY* {.importc: "O_WRONLY", header: "<fcntl.h>".}: cint
var O_CLOEXEC* {.importc: "O_CLOEXEC", header: "<fcntl.h>".}: cint
var POSIX_FADV_NORMAL* {.importc: "POSIX_FADV_NORMAL", header: "<fcntl.h>".}: cint
var POSIX_FADV_SEQUENTIAL* {.importc: "POSIX_FADV_SEQUENTIAL", header: "<fcntl.h>".}: cint
var POSIX_FADV_RANDOM* {.importc: "POSIX_FADV_RANDOM", header: "<fcntl.h>".}: cint
var POSIX_FADV_WILLNEED* {.importc: "POSIX_FADV_WILLNEED", header: "<fcntl.h>".}: cint
var POSIX_FADV_DONTNEED* {.importc: "POSIX_FADV_DONTNEED", header: "<fcntl.h>".}: cint
var POSIX_FADV_NOREUSE* {.importc: "POSIX_FADV_NOREUSE", header: "<fcntl.h>".}: cint

# <fenv.h>
var FE_DIVBYZERO* {.importc: "FE_DIVBYZERO", header: "<fenv.h>".}: cint
var FE_INEXACT* {.importc: "FE_INEXACT", header: "<fenv.h>".}: cint
var FE_INVALID* {.importc: "FE_INVALID", header: "<fenv.h>".}: cint
var FE_OVERFLOW* {.importc: "FE_OVERFLOW", header: "<fenv.h>".}: cint
var FE_UNDERFLOW* {.importc: "FE_UNDERFLOW", header: "<fenv.h>".}: cint
var FE_ALL_EXCEPT* {.importc: "FE_ALL_EXCEPT", header: "<fenv.h>".}: cint
var FE_DOWNWARD* {.importc: "FE_DOWNWARD", header: "<fenv.h>".}: cint
var FE_TONEAREST* {.importc: "FE_TONEAREST", header: "<fenv.h>".}: cint
var FE_TOWARDZERO* {.importc: "FE_TOWARDZERO", header: "<fenv.h>".}: cint
var FE_UPWARD* {.importc: "FE_UPWARD", header: "<fenv.h>".}: cint
var FE_DFL_ENV* {.importc: "FE_DFL_ENV", header: "<fenv.h>".}: cint

# <fmtmsg.h>
var MM_HARD* {.importc: "MM_HARD", header: "<fmtmsg.h>".}: cint
var MM_SOFT* {.importc: "MM_SOFT", header: "<fmtmsg.h>".}: cint
var MM_FIRM* {.importc: "MM_FIRM", header: "<fmtmsg.h>".}: cint
var MM_APPL* {.importc: "MM_APPL", header: "<fmtmsg.h>".}: cint
var MM_UTIL* {.importc: "MM_UTIL", header: "<fmtmsg.h>".}: cint
var MM_OPSYS* {.importc: "MM_OPSYS", header: "<fmtmsg.h>".}: cint
var MM_RECOVER* {.importc: "MM_RECOVER", header: "<fmtmsg.h>".}: cint
var MM_NRECOV* {.importc: "MM_NRECOV", header: "<fmtmsg.h>".}: cint
var MM_HALT* {.importc: "MM_HALT", header: "<fmtmsg.h>".}: cint
var MM_ERROR* {.importc: "MM_ERROR", header: "<fmtmsg.h>".}: cint
var MM_WARNING* {.importc: "MM_WARNING", header: "<fmtmsg.h>".}: cint
var MM_INFO* {.importc: "MM_INFO", header: "<fmtmsg.h>".}: cint
var MM_NOSEV* {.importc: "MM_NOSEV", header: "<fmtmsg.h>".}: cint
var MM_PRINT* {.importc: "MM_PRINT", header: "<fmtmsg.h>".}: cint
var MM_CONSOLE* {.importc: "MM_CONSOLE", header: "<fmtmsg.h>".}: cint
var MM_OK* {.importc: "MM_OK", header: "<fmtmsg.h>".}: cint
var MM_NOTOK* {.importc: "MM_NOTOK", header: "<fmtmsg.h>".}: cint
var MM_NOMSG* {.importc: "MM_NOMSG", header: "<fmtmsg.h>".}: cint
var MM_NOCON* {.importc: "MM_NOCON", header: "<fmtmsg.h>".}: cint

# <fnmatch.h>
var FNM_NOMATCH* {.importc: "FNM_NOMATCH", header: "<fnmatch.h>".}: cint
var FNM_PATHNAME* {.importc: "FNM_PATHNAME", header: "<fnmatch.h>".}: cint
var FNM_PERIOD* {.importc: "FNM_PERIOD", header: "<fnmatch.h>".}: cint
var FNM_NOESCAPE* {.importc: "FNM_NOESCAPE", header: "<fnmatch.h>".}: cint
var FNM_NOSYS* {.importc: "FNM_NOSYS", header: "<fnmatch.h>".}: cint

# <ftw.h>
var FTW_F* {.importc: "FTW_F", header: "<ftw.h>".}: cint
var FTW_D* {.importc: "FTW_D", header: "<ftw.h>".}: cint
var FTW_DNR* {.importc: "FTW_DNR", header: "<ftw.h>".}: cint
var FTW_DP* {.importc: "FTW_DP", header: "<ftw.h>".}: cint
var FTW_NS* {.importc: "FTW_NS", header: "<ftw.h>".}: cint
var FTW_SL* {.importc: "FTW_SL", header: "<ftw.h>".}: cint
var FTW_SLN* {.importc: "FTW_SLN", header: "<ftw.h>".}: cint
var FTW_PHYS* {.importc: "FTW_PHYS", header: "<ftw.h>".}: cint
var FTW_MOUNT* {.importc: "FTW_MOUNT", header: "<ftw.h>".}: cint
var FTW_DEPTH* {.importc: "FTW_DEPTH", header: "<ftw.h>".}: cint
var FTW_CHDIR* {.importc: "FTW_CHDIR", header: "<ftw.h>".}: cint

# <glob.h>
var GLOB_APPEND* {.importc: "GLOB_APPEND", header: "<glob.h>".}: cint
var GLOB_DOOFFS* {.importc: "GLOB_DOOFFS", header: "<glob.h>".}: cint
var GLOB_ERR* {.importc: "GLOB_ERR", header: "<glob.h>".}: cint
var GLOB_MARK* {.importc: "GLOB_MARK", header: "<glob.h>".}: cint
var GLOB_NOCHECK* {.importc: "GLOB_NOCHECK", header: "<glob.h>".}: cint
var GLOB_NOESCAPE* {.importc: "GLOB_NOESCAPE", header: "<glob.h>".}: cint
var GLOB_NOSORT* {.importc: "GLOB_NOSORT", header: "<glob.h>".}: cint
var GLOB_ABORTED* {.importc: "GLOB_ABORTED", header: "<glob.h>".}: cint
var GLOB_NOMATCH* {.importc: "GLOB_NOMATCH", header: "<glob.h>".}: cint
var GLOB_NOSPACE* {.importc: "GLOB_NOSPACE", header: "<glob.h>".}: cint
var GLOB_NOSYS* {.importc: "GLOB_NOSYS", header: "<glob.h>".}: cint

# <langinfo.h>
var CODESET* {.importc: "CODESET", header: "<langinfo.h>".}: cint
var D_T_FMT* {.importc: "D_T_FMT", header: "<langinfo.h>".}: cint
var D_FMT* {.importc: "D_FMT", header: "<langinfo.h>".}: cint
var T_FMT* {.importc: "T_FMT", header: "<langinfo.h>".}: cint
var T_FMT_AMPM* {.importc: "T_FMT_AMPM", header: "<langinfo.h>".}: cint
var AM_STR* {.importc: "AM_STR", header: "<langinfo.h>".}: cint
var PM_STR* {.importc: "PM_STR", header: "<langinfo.h>".}: cint
var DAY_1* {.importc: "DAY_1", header: "<langinfo.h>".}: cint
var DAY_2* {.importc: "DAY_2", header: "<langinfo.h>".}: cint
var DAY_3* {.importc: "DAY_3", header: "<langinfo.h>".}: cint
var DAY_4* {.importc: "DAY_4", header: "<langinfo.h>".}: cint
var DAY_5* {.importc: "DAY_5", header: "<langinfo.h>".}: cint
var DAY_6* {.importc: "DAY_6", header: "<langinfo.h>".}: cint
var DAY_7* {.importc: "DAY_7", header: "<langinfo.h>".}: cint
var ABDAY_1* {.importc: "ABDAY_1", header: "<langinfo.h>".}: cint
var ABDAY_2* {.importc: "ABDAY_2", header: "<langinfo.h>".}: cint
var ABDAY_3* {.importc: "ABDAY_3", header: "<langinfo.h>".}: cint
var ABDAY_4* {.importc: "ABDAY_4", header: "<langinfo.h>".}: cint
var ABDAY_5* {.importc: "ABDAY_5", header: "<langinfo.h>".}: cint
var ABDAY_6* {.importc: "ABDAY_6", header: "<langinfo.h>".}: cint
var ABDAY_7* {.importc: "ABDAY_7", header: "<langinfo.h>".}: cint
var MON_1* {.importc: "MON_1", header: "<langinfo.h>".}: cint
var MON_2* {.importc: "MON_2", header: "<langinfo.h>".}: cint
var MON_3* {.importc: "MON_3", header: "<langinfo.h>".}: cint
var MON_4* {.importc: "MON_4", header: "<langinfo.h>".}: cint
var MON_5* {.importc: "MON_5", header: "<langinfo.h>".}: cint
var MON_6* {.importc: "MON_6", header: "<langinfo.h>".}: cint
var MON_7* {.importc: "MON_7", header: "<langinfo.h>".}: cint
var MON_8* {.importc: "MON_8", header: "<langinfo.h>".}: cint
var MON_9* {.importc: "MON_9", header: "<langinfo.h>".}: cint
var MON_10* {.importc: "MON_10", header: "<langinfo.h>".}: cint
var MON_11* {.importc: "MON_11", header: "<langinfo.h>".}: cint
var MON_12* {.importc: "MON_12", header: "<langinfo.h>".}: cint
var ABMON_1* {.importc: "ABMON_1", header: "<langinfo.h>".}: cint
var ABMON_2* {.importc: "ABMON_2", header: "<langinfo.h>".}: cint
var ABMON_3* {.importc: "ABMON_3", header: "<langinfo.h>".}: cint
var ABMON_4* {.importc: "ABMON_4", header: "<langinfo.h>".}: cint
var ABMON_5* {.importc: "ABMON_5", header: "<langinfo.h>".}: cint
var ABMON_6* {.importc: "ABMON_6", header: "<langinfo.h>".}: cint
var ABMON_7* {.importc: "ABMON_7", header: "<langinfo.h>".}: cint
var ABMON_8* {.importc: "ABMON_8", header: "<langinfo.h>".}: cint
var ABMON_9* {.importc: "ABMON_9", header: "<langinfo.h>".}: cint
var ABMON_10* {.importc: "ABMON_10", header: "<langinfo.h>".}: cint
var ABMON_11* {.importc: "ABMON_11", header: "<langinfo.h>".}: cint
var ABMON_12* {.importc: "ABMON_12", header: "<langinfo.h>".}: cint
var ERA* {.importc: "ERA", header: "<langinfo.h>".}: cint
var ERA_D_FMT* {.importc: "ERA_D_FMT", header: "<langinfo.h>".}: cint
var ERA_D_T_FMT* {.importc: "ERA_D_T_FMT", header: "<langinfo.h>".}: cint
var ERA_T_FMT* {.importc: "ERA_T_FMT", header: "<langinfo.h>".}: cint
var ALT_DIGITS* {.importc: "ALT_DIGITS", header: "<langinfo.h>".}: cint
var RADIXCHAR* {.importc: "RADIXCHAR", header: "<langinfo.h>".}: cint
var THOUSEP* {.importc: "THOUSEP", header: "<langinfo.h>".}: cint
var YESEXPR* {.importc: "YESEXPR", header: "<langinfo.h>".}: cint
var NOEXPR* {.importc: "NOEXPR", header: "<langinfo.h>".}: cint
var CRNCYSTR* {.importc: "CRNCYSTR", header: "<langinfo.h>".}: cint

# <locale.h>
var LC_ALL* {.importc: "LC_ALL", header: "<locale.h>".}: cint
var LC_COLLATE* {.importc: "LC_COLLATE", header: "<locale.h>".}: cint
var LC_CTYPE* {.importc: "LC_CTYPE", header: "<locale.h>".}: cint
var LC_MESSAGES* {.importc: "LC_MESSAGES", header: "<locale.h>".}: cint
var LC_MONETARY* {.importc: "LC_MONETARY", header: "<locale.h>".}: cint
var LC_NUMERIC* {.importc: "LC_NUMERIC", header: "<locale.h>".}: cint
var LC_TIME* {.importc: "LC_TIME", header: "<locale.h>".}: cint

# <netdb.h>
var IPPORT_RESERVED* {.importc: "IPPORT_RESERVED", header: "<netdb.h>".}: cint
var HOST_NOT_FOUND* {.importc: "HOST_NOT_FOUND", header: "<netdb.h>".}: cint
var NO_DATA* {.importc: "NO_DATA", header: "<netdb.h>".}: cint
var NO_RECOVERY* {.importc: "NO_RECOVERY", header: "<netdb.h>".}: cint
var TRY_AGAIN* {.importc: "TRY_AGAIN", header: "<netdb.h>".}: cint
var AI_PASSIVE* {.importc: "AI_PASSIVE", header: "<netdb.h>".}: cint
var AI_CANONNAME* {.importc: "AI_CANONNAME", header: "<netdb.h>".}: cint
var AI_NUMERICHOST* {.importc: "AI_NUMERICHOST", header: "<netdb.h>".}: cint
var AI_NUMERICSERV* {.importc: "AI_NUMERICSERV", header: "<netdb.h>".}: cint
var AI_V4MAPPED* {.importc: "AI_V4MAPPED", header: "<netdb.h>".}: cint
var AI_ALL* {.importc: "AI_ALL", header: "<netdb.h>".}: cint
var AI_ADDRCONFIG* {.importc: "AI_ADDRCONFIG", header: "<netdb.h>".}: cint
var NI_NOFQDN* {.importc: "NI_NOFQDN", header: "<netdb.h>".}: cint
var NI_NUMERICHOST* {.importc: "NI_NUMERICHOST", header: "<netdb.h>".}: cint
var NI_NAMEREQD* {.importc: "NI_NAMEREQD", header: "<netdb.h>".}: cint
var NI_NUMERICSERV* {.importc: "NI_NUMERICSERV", header: "<netdb.h>".}: cint
var NI_NUMERICSCOPE* {.importc: "NI_NUMERICSCOPE", header: "<netdb.h>".}: cint
var NI_DGRAM* {.importc: "NI_DGRAM", header: "<netdb.h>".}: cint
var EAI_AGAIN* {.importc: "EAI_AGAIN", header: "<netdb.h>".}: cint
var EAI_BADFLAGS* {.importc: "EAI_BADFLAGS", header: "<netdb.h>".}: cint
var EAI_FAIL* {.importc: "EAI_FAIL", header: "<netdb.h>".}: cint
var EAI_FAMILY* {.importc: "EAI_FAMILY", header: "<netdb.h>".}: cint
var EAI_MEMORY* {.importc: "EAI_MEMORY", header: "<netdb.h>".}: cint
var EAI_NONAME* {.importc: "EAI_NONAME", header: "<netdb.h>".}: cint
var EAI_SERVICE* {.importc: "EAI_SERVICE", header: "<netdb.h>".}: cint
var EAI_SOCKTYPE* {.importc: "EAI_SOCKTYPE", header: "<netdb.h>".}: cint
var EAI_SYSTEM* {.importc: "EAI_SYSTEM", header: "<netdb.h>".}: cint
var EAI_OVERFLOW* {.importc: "EAI_OVERFLOW", header: "<netdb.h>".}: cint

# <net/if.h>
var IF_NAMESIZE* {.importc: "IF_NAMESIZE", header: "<net/if.h>".}: cint

# <netinet/in.h>
const IPPROTO_DEFAULT* = cint(0)
var IPPROTO_IP* {.importc: "IPPROTO_IP", header: "<netinet/in.h>".}: cint
var IPPROTO_IPV6* {.importc: "IPPROTO_IPV6", header: "<netinet/in.h>".}: cint
var IPPROTO_ICMP* {.importc: "IPPROTO_ICMP", header: "<netinet/in.h>".}: cint
var IPPROTO_ICMPV6* {.importc: "IPPROTO_ICMPV6", header: "<netinet/in.h>".}: cint
var IPPROTO_RAW* {.importc: "IPPROTO_RAW", header: "<netinet/in.h>".}: cint
var IPPROTO_TCP* {.importc: "IPPROTO_TCP", header: "<netinet/in.h>".}: cint
var IPPROTO_UDP* {.importc: "IPPROTO_UDP", header: "<netinet/in.h>".}: cint
var INADDR_ANY* {.importc: "INADDR_ANY", header: "<netinet/in.h>".}: InAddrScalar
var INADDR_LOOPBACK* {.importc: "INADDR_LOOPBACK", header: "<netinet/in.h>".}: InAddrScalar
var INADDR_BROADCAST* {.importc: "INADDR_BROADCAST", header: "<netinet/in.h>".}: InAddrScalar
var INET_ADDRSTRLEN* {.importc: "INET_ADDRSTRLEN", header: "<netinet/in.h>".}: cint
var INET6_ADDRSTRLEN* {.importc: "INET6_ADDRSTRLEN", header: "<netinet/in.h>".}: cint
var IPV6_JOIN_GROUP* {.importc: "IPV6_JOIN_GROUP", header: "<netinet/in.h>".}: cint
var IPV6_LEAVE_GROUP* {.importc: "IPV6_LEAVE_GROUP", header: "<netinet/in.h>".}: cint
var IPV6_MULTICAST_HOPS* {.importc: "IPV6_MULTICAST_HOPS", header: "<netinet/in.h>".}: cint
var IPV6_MULTICAST_IF* {.importc: "IPV6_MULTICAST_IF", header: "<netinet/in.h>".}: cint
var IPV6_MULTICAST_LOOP* {.importc: "IPV6_MULTICAST_LOOP", header: "<netinet/in.h>".}: cint
var IPV6_UNICAST_HOPS* {.importc: "IPV6_UNICAST_HOPS", header: "<netinet/in.h>".}: cint
var IPV6_V6ONLY* {.importc: "IPV6_V6ONLY", header: "<netinet/in.h>".}: cint

# <netinet/tcp.h>
var TCP_NODELAY* {.importc: "TCP_NODELAY", header: "<netinet/tcp.h>".}: cint

# <nl_types.h>
var NL_SETD* {.importc: "NL_SETD", header: "<nl_types.h>".}: cint
var NL_CAT_LOCALE* {.importc: "NL_CAT_LOCALE", header: "<nl_types.h>".}: cint

# <poll.h>
var POLLIN* {.importc: "POLLIN", header: "<poll.h>".}: cshort
var POLLRDNORM* {.importc: "POLLRDNORM", header: "<poll.h>".}: cshort
var POLLRDBAND* {.importc: "POLLRDBAND", header: "<poll.h>".}: cshort
var POLLPRI* {.importc: "POLLPRI", header: "<poll.h>".}: cshort
var POLLOUT* {.importc: "POLLOUT", header: "<poll.h>".}: cshort
var POLLWRNORM* {.importc: "POLLWRNORM", header: "<poll.h>".}: cshort
var POLLWRBAND* {.importc: "POLLWRBAND", header: "<poll.h>".}: cshort
var POLLERR* {.importc: "POLLERR", header: "<poll.h>".}: cshort
var POLLHUP* {.importc: "POLLHUP", header: "<poll.h>".}: cshort
var POLLNVAL* {.importc: "POLLNVAL", header: "<poll.h>".}: cshort

# <pthread.h>
var PTHREAD_BARRIER_SERIAL_THREAD* {.importc: "PTHREAD_BARRIER_SERIAL_THREAD", header: "<pthread.h>".}: cint
var PTHREAD_CANCEL_ASYNCHRONOUS* {.importc: "PTHREAD_CANCEL_ASYNCHRONOUS", header: "<pthread.h>".}: cint
var PTHREAD_CANCEL_ENABLE* {.importc: "PTHREAD_CANCEL_ENABLE", header: "<pthread.h>".}: cint
var PTHREAD_CANCEL_DEFERRED* {.importc: "PTHREAD_CANCEL_DEFERRED", header: "<pthread.h>".}: cint
var PTHREAD_CANCEL_DISABLE* {.importc: "PTHREAD_CANCEL_DISABLE", header: "<pthread.h>".}: cint
var PTHREAD_CREATE_DETACHED* {.importc: "PTHREAD_CREATE_DETACHED", header: "<pthread.h>".}: cint
var PTHREAD_CREATE_JOINABLE* {.importc: "PTHREAD_CREATE_JOINABLE", header: "<pthread.h>".}: cint
var PTHREAD_EXPLICIT_SCHED* {.importc: "PTHREAD_EXPLICIT_SCHED", header: "<pthread.h>".}: cint
var PTHREAD_INHERIT_SCHED* {.importc: "PTHREAD_INHERIT_SCHED", header: "<pthread.h>".}: cint
var PTHREAD_MUTEX_DEFAULT* {.importc: "PTHREAD_MUTEX_DEFAULT", header: "<pthread.h>".}: cint
var PTHREAD_MUTEX_ERRORCHECK* {.importc: "PTHREAD_MUTEX_ERRORCHECK", header: "<pthread.h>".}: cint
var PTHREAD_MUTEX_NORMAL* {.importc: "PTHREAD_MUTEX_NORMAL", header: "<pthread.h>".}: cint
var PTHREAD_MUTEX_RECURSIVE* {.importc: "PTHREAD_MUTEX_RECURSIVE", header: "<pthread.h>".}: cint
var PTHREAD_PRIO_INHERIT* {.importc: "PTHREAD_PRIO_INHERIT", header: "<pthread.h>".}: cint
var PTHREAD_PRIO_NONE* {.importc: "PTHREAD_PRIO_NONE", header: "<pthread.h>".}: cint
var PTHREAD_PRIO_PROTECT* {.importc: "PTHREAD_PRIO_PROTECT", header: "<pthread.h>".}: cint
var PTHREAD_PROCESS_SHARED* {.importc: "PTHREAD_PROCESS_SHARED", header: "<pthread.h>".}: cint
var PTHREAD_PROCESS_PRIVATE* {.importc: "PTHREAD_PROCESS_PRIVATE", header: "<pthread.h>".}: cint
var PTHREAD_SCOPE_PROCESS* {.importc: "PTHREAD_SCOPE_PROCESS", header: "<pthread.h>".}: cint
var PTHREAD_SCOPE_SYSTEM* {.importc: "PTHREAD_SCOPE_SYSTEM", header: "<pthread.h>".}: cint

# <sched.h>
var SCHED_FIFO* {.importc: "SCHED_FIFO", header: "<sched.h>".}: cint
var SCHED_RR* {.importc: "SCHED_RR", header: "<sched.h>".}: cint
var SCHED_SPORADIC* {.importc: "SCHED_SPORADIC", header: "<sched.h>".}: cint
var SCHED_OTHER* {.importc: "SCHED_OTHER", header: "<sched.h>".}: cint

# <semaphore.h>
var SEM_FAILED* {.importc: "SEM_FAILED", header: "<semaphore.h>".}: pointer

# <signal.h>
var SIGEV_NONE* {.importc: "SIGEV_NONE", header: "<signal.h>".}: cint
var SIGEV_SIGNAL* {.importc: "SIGEV_SIGNAL", header: "<signal.h>".}: cint
var SIGEV_THREAD* {.importc: "SIGEV_THREAD", header: "<signal.h>".}: cint
var SIGABRT* {.importc: "SIGABRT", header: "<signal.h>".}: cint
var SIGALRM* {.importc: "SIGALRM", header: "<signal.h>".}: cint
var SIGBUS* {.importc: "SIGBUS", header: "<signal.h>".}: cint
var SIGCHLD* {.importc: "SIGCHLD", header: "<signal.h>".}: cint
var SIGCONT* {.importc: "SIGCONT", header: "<signal.h>".}: cint
var SIGFPE* {.importc: "SIGFPE", header: "<signal.h>".}: cint
var SIGHUP* {.importc: "SIGHUP", header: "<signal.h>".}: cint
var SIGILL* {.importc: "SIGILL", header: "<signal.h>".}: cint
var SIGINT* {.importc: "SIGINT", header: "<signal.h>".}: cint
var SIGKILL* {.importc: "SIGKILL", header: "<signal.h>".}: cint
var SIGPIPE* {.importc: "SIGPIPE", header: "<signal.h>".}: cint
var SIGQUIT* {.importc: "SIGQUIT", header: "<signal.h>".}: cint
var SIGSEGV* {.importc: "SIGSEGV", header: "<signal.h>".}: cint
var SIGSTOP* {.importc: "SIGSTOP", header: "<signal.h>".}: cint
var SIGTERM* {.importc: "SIGTERM", header: "<signal.h>".}: cint
var SIGTSTP* {.importc: "SIGTSTP", header: "<signal.h>".}: cint
var SIGTTIN* {.importc: "SIGTTIN", header: "<signal.h>".}: cint
var SIGTTOU* {.importc: "SIGTTOU", header: "<signal.h>".}: cint
var SIGUSR1* {.importc: "SIGUSR1", header: "<signal.h>".}: cint
var SIGUSR2* {.importc: "SIGUSR2", header: "<signal.h>".}: cint
var SIGPOLL* {.importc: "SIGPOLL", header: "<signal.h>".}: cint
var SIGPROF* {.importc: "SIGPROF", header: "<signal.h>".}: cint
var SIGSYS* {.importc: "SIGSYS", header: "<signal.h>".}: cint
var SIGTRAP* {.importc: "SIGTRAP", header: "<signal.h>".}: cint
var SIGURG* {.importc: "SIGURG", header: "<signal.h>".}: cint
var SIGVTALRM* {.importc: "SIGVTALRM", header: "<signal.h>".}: cint
var SIGXCPU* {.importc: "SIGXCPU", header: "<signal.h>".}: cint
var SIGXFSZ* {.importc: "SIGXFSZ", header: "<signal.h>".}: cint
var SA_NOCLDSTOP* {.importc: "SA_NOCLDSTOP", header: "<signal.h>".}: cint
var SIG_BLOCK* {.importc: "SIG_BLOCK", header: "<signal.h>".}: cint
var SIG_UNBLOCK* {.importc: "SIG_UNBLOCK", header: "<signal.h>".}: cint
var SIG_SETMASK* {.importc: "SIG_SETMASK", header: "<signal.h>".}: cint
var SA_ONSTACK* {.importc: "SA_ONSTACK", header: "<signal.h>".}: cint
var SA_RESETHAND* {.importc: "SA_RESETHAND", header: "<signal.h>".}: cint
var SA_RESTART* {.importc: "SA_RESTART", header: "<signal.h>".}: cint
var SA_SIGINFO* {.importc: "SA_SIGINFO", header: "<signal.h>".}: cint
var SA_NOCLDWAIT* {.importc: "SA_NOCLDWAIT", header: "<signal.h>".}: cint
var SA_NODEFER* {.importc: "SA_NODEFER", header: "<signal.h>".}: cint
var SS_ONSTACK* {.importc: "SS_ONSTACK", header: "<signal.h>".}: cint
var SS_DISABLE* {.importc: "SS_DISABLE", header: "<signal.h>".}: cint
var MINSIGSTKSZ* {.importc: "MINSIGSTKSZ", header: "<signal.h>".}: cint
var SIGSTKSZ* {.importc: "SIGSTKSZ", header: "<signal.h>".}: cint
var SIG_HOLD* {.importc: "SIG_HOLD", header: "<signal.h>".}: Sighandler
var SIG_DFL* {.importc: "SIG_DFL", header: "<signal.h>".}: Sighandler
var SIG_ERR* {.importc: "SIG_ERR", header: "<signal.h>".}: Sighandler
var SIG_IGN* {.importc: "SIG_IGN", header: "<signal.h>".}: Sighandler

# <sys/ipc.h>
var IPC_CREAT* {.importc: "IPC_CREAT", header: "<sys/ipc.h>".}: cint
var IPC_EXCL* {.importc: "IPC_EXCL", header: "<sys/ipc.h>".}: cint
var IPC_NOWAIT* {.importc: "IPC_NOWAIT", header: "<sys/ipc.h>".}: cint
var IPC_PRIVATE* {.importc: "IPC_PRIVATE", header: "<sys/ipc.h>".}: cint
var IPC_RMID* {.importc: "IPC_RMID", header: "<sys/ipc.h>".}: cint
var IPC_SET* {.importc: "IPC_SET", header: "<sys/ipc.h>".}: cint
var IPC_STAT* {.importc: "IPC_STAT", header: "<sys/ipc.h>".}: cint

# <sys/mman.h>
var PROT_READ* {.importc: "PROT_READ", header: "<sys/mman.h>".}: cint
var PROT_WRITE* {.importc: "PROT_WRITE", header: "<sys/mman.h>".}: cint
var PROT_EXEC* {.importc: "PROT_EXEC", header: "<sys/mman.h>".}: cint
var PROT_NONE* {.importc: "PROT_NONE", header: "<sys/mman.h>".}: cint
var MAP_ANONYMOUS* {.importc: "MAP_ANONYMOUS", header: "<sys/mman.h>".}: cint
var MAP_FIXED_NOREPLACE* {.importc: "MAP_FIXED_NOREPLACE", header: "<sys/mman.h>".}: cint
var MAP_NORESERVE* {.importc: "MAP_NORESERVE", header: "<sys/mman.h>".}: cint
var MAP_SHARED* {.importc: "MAP_SHARED", header: "<sys/mman.h>".}: cint
var MAP_PRIVATE* {.importc: "MAP_PRIVATE", header: "<sys/mman.h>".}: cint
var MAP_FIXED* {.importc: "MAP_FIXED", header: "<sys/mman.h>".}: cint
var MS_ASYNC* {.importc: "MS_ASYNC", header: "<sys/mman.h>".}: cint
var MS_SYNC* {.importc: "MS_SYNC", header: "<sys/mman.h>".}: cint
var MS_INVALIDATE* {.importc: "MS_INVALIDATE", header: "<sys/mman.h>".}: cint
var MCL_CURRENT* {.importc: "MCL_CURRENT", header: "<sys/mman.h>".}: cint
var MCL_FUTURE* {.importc: "MCL_FUTURE", header: "<sys/mman.h>".}: cint
var MAP_FAILED* {.importc: "MAP_FAILED", header: "<sys/mman.h>".}: pointer
var POSIX_MADV_NORMAL* {.importc: "POSIX_MADV_NORMAL", header: "<sys/mman.h>".}: cint
var POSIX_MADV_SEQUENTIAL* {.importc: "POSIX_MADV_SEQUENTIAL", header: "<sys/mman.h>".}: cint
var POSIX_MADV_RANDOM* {.importc: "POSIX_MADV_RANDOM", header: "<sys/mman.h>".}: cint
var POSIX_MADV_WILLNEED* {.importc: "POSIX_MADV_WILLNEED", header: "<sys/mman.h>".}: cint
var POSIX_MADV_DONTNEED* {.importc: "POSIX_MADV_DONTNEED", header: "<sys/mman.h>".}: cint
var POSIX_TYPED_MEM_ALLOCATE* {.importc: "POSIX_TYPED_MEM_ALLOCATE", header: "<sys/mman.h>".}: cint
var POSIX_TYPED_MEM_ALLOCATE_CONTIG* {.importc: "POSIX_TYPED_MEM_ALLOCATE_CONTIG", header: "<sys/mman.h>".}: cint
var POSIX_TYPED_MEM_MAP_ALLOCATABLE* {.importc: "POSIX_TYPED_MEM_MAP_ALLOCATABLE", header: "<sys/mman.h>".}: cint

# <sys/resource.h>
var RLIMIT_NOFILE* {.importc: "RLIMIT_NOFILE", header: "<sys/resource.h>".}: cint

# <sys/select.h>
var FD_SETSIZE* {.importc: "FD_SETSIZE", header: "<sys/select.h>".}: cint

# <sys/socket.h>
var MSG_CTRUNC* {.importc: "MSG_CTRUNC", header: "<sys/socket.h>".}: cint
var MSG_DONTROUTE* {.importc: "MSG_DONTROUTE", header: "<sys/socket.h>".}: cint
var MSG_EOR* {.importc: "MSG_EOR", header: "<sys/socket.h>".}: cint
var MSG_OOB* {.importc: "MSG_OOB", header: "<sys/socket.h>".}: cint
var SCM_RIGHTS* {.importc: "SCM_RIGHTS", header: "<sys/socket.h>".}: cint
var SO_ACCEPTCONN* {.importc: "SO_ACCEPTCONN", header: "<sys/socket.h>".}: cint
var SO_BROADCAST* {.importc: "SO_BROADCAST", header: "<sys/socket.h>".}: cint
var SO_DEBUG* {.importc: "SO_DEBUG", header: "<sys/socket.h>".}: cint
var SO_DONTROUTE* {.importc: "SO_DONTROUTE", header: "<sys/socket.h>".}: cint
var SO_ERROR* {.importc: "SO_ERROR", header: "<sys/socket.h>".}: cint
var SO_KEEPALIVE* {.importc: "SO_KEEPALIVE", header: "<sys/socket.h>".}: cint
var SO_LINGER* {.importc: "SO_LINGER", header: "<sys/socket.h>".}: cint
var SO_OOBINLINE* {.importc: "SO_OOBINLINE", header: "<sys/socket.h>".}: cint
var SO_RCVBUF* {.importc: "SO_RCVBUF", header: "<sys/socket.h>".}: cint
var SO_RCVLOWAT* {.importc: "SO_RCVLOWAT", header: "<sys/socket.h>".}: cint
var SO_RCVTIMEO* {.importc: "SO_RCVTIMEO", header: "<sys/socket.h>".}: cint
var SO_REUSEADDR* {.importc: "SO_REUSEADDR", header: "<sys/socket.h>".}: cint
var SO_SNDBUF* {.importc: "SO_SNDBUF", header: "<sys/socket.h>".}: cint
var SO_SNDLOWAT* {.importc: "SO_SNDLOWAT", header: "<sys/socket.h>".}: cint
var SO_SNDTIMEO* {.importc: "SO_SNDTIMEO", header: "<sys/socket.h>".}: cint
var SO_TYPE* {.importc: "SO_TYPE", header: "<sys/socket.h>".}: cint
var SOCK_DGRAM* {.importc: "SOCK_DGRAM", header: "<sys/socket.h>".}: cint
var SOCK_RAW* {.importc: "SOCK_RAW", header: "<sys/socket.h>".}: cint
var SOCK_SEQPACKET* {.importc: "SOCK_SEQPACKET", header: "<sys/socket.h>".}: cint
var SOCK_STREAM* {.importc: "SOCK_STREAM", header: "<sys/socket.h>".}: cint
var SOL_SOCKET* {.importc: "SOL_SOCKET", header: "<sys/socket.h>".}: cint
var SOMAXCONN* {.importc: "SOMAXCONN", header: "<sys/socket.h>".}: cint
var MSG_PEEK* {.importc: "MSG_PEEK", header: "<sys/socket.h>".}: cint
var MSG_TRUNC* {.importc: "MSG_TRUNC", header: "<sys/socket.h>".}: cint
var MSG_WAITALL* {.importc: "MSG_WAITALL", header: "<sys/socket.h>".}: cint
var AF_INET* {.importc: "AF_INET", header: "<sys/socket.h>".}: cint
var AF_INET6* {.importc: "AF_INET6", header: "<sys/socket.h>".}: cint
var AF_UNIX* {.importc: "AF_UNIX", header: "<sys/socket.h>".}: cint
var AF_UNSPEC* {.importc: "AF_UNSPEC", header: "<sys/socket.h>".}: cint
var SHUT_RD* {.importc: "SHUT_RD", header: "<sys/socket.h>".}: cint
var SHUT_RDWR* {.importc: "SHUT_RDWR", header: "<sys/socket.h>".}: cint
var SHUT_WR* {.importc: "SHUT_WR", header: "<sys/socket.h>".}: cint

# <sys/stat.h>
var S_IFBLK* {.importc: "S_IFBLK", header: "<sys/stat.h>".}: cint
var S_IFCHR* {.importc: "S_IFCHR", header: "<sys/stat.h>".}: cint
var S_IFDIR* {.importc: "S_IFDIR", header: "<sys/stat.h>".}: cint
var S_IFIFO* {.importc: "S_IFIFO", header: "<sys/stat.h>".}: cint
var S_IFLNK* {.importc: "S_IFLNK", header: "<sys/stat.h>".}: cint
var S_IFMT* {.importc: "S_IFMT", header: "<sys/stat.h>".}: cint
var S_IFREG* {.importc: "S_IFREG", header: "<sys/stat.h>".}: cint
var S_IFSOCK* {.importc: "S_IFSOCK", header: "<sys/stat.h>".}: cint
var S_IRGRP* {.importc: "S_IRGRP", header: "<sys/stat.h>".}: cint
var S_IROTH* {.importc: "S_IROTH", header: "<sys/stat.h>".}: cint
var S_IRUSR* {.importc: "S_IRUSR", header: "<sys/stat.h>".}: cint
var S_IRWXG* {.importc: "S_IRWXG", header: "<sys/stat.h>".}: cint
var S_IRWXO* {.importc: "S_IRWXO", header: "<sys/stat.h>".}: cint
var S_IRWXU* {.importc: "S_IRWXU", header: "<sys/stat.h>".}: cint
var S_ISGID* {.importc: "S_ISGID", header: "<sys/stat.h>".}: cint
var S_ISUID* {.importc: "S_ISUID", header: "<sys/stat.h>".}: cint
var S_ISVTX* {.importc: "S_ISVTX", header: "<sys/stat.h>".}: cint
var S_IWGRP* {.importc: "S_IWGRP", header: "<sys/stat.h>".}: cint
var S_IWOTH* {.importc: "S_IWOTH", header: "<sys/stat.h>".}: cint
var S_IWUSR* {.importc: "S_IWUSR", header: "<sys/stat.h>".}: cint
var S_IXGRP* {.importc: "S_IXGRP", header: "<sys/stat.h>".}: cint
var S_IXOTH* {.importc: "S_IXOTH", header: "<sys/stat.h>".}: cint
var S_IXUSR* {.importc: "S_IXUSR", header: "<sys/stat.h>".}: cint

# <sys/statvfs.h>
var ST_RDONLY* {.importc: "ST_RDONLY", header: "<sys/statvfs.h>".}: cint
var ST_NOSUID* {.importc: "ST_NOSUID", header: "<sys/statvfs.h>".}: cint

# <sys/wait.h>
var WNOHANG* {.importc: "WNOHANG", header: "<sys/wait.h>".}: cint
var WUNTRACED* {.importc: "WUNTRACED", header: "<sys/wait.h>".}: cint
var WEXITED* {.importc: "WEXITED", header: "<sys/wait.h>".}: cint
var WSTOPPED* {.importc: "WSTOPPED", header: "<sys/wait.h>".}: cint
var WCONTINUED* {.importc: "WCONTINUED", header: "<sys/wait.h>".}: cint
var WNOWAIT* {.importc: "WNOWAIT", header: "<sys/wait.h>".}: cint
var P_ALL* {.importc: "P_ALL", header: "<sys/wait.h>".}: cint
var P_PID* {.importc: "P_PID", header: "<sys/wait.h>".}: cint
var P_PGID* {.importc: "P_PGID", header: "<sys/wait.h>".}: cint

# <spawn.h>
var POSIX_SPAWN_RESETIDS* {.importc: "POSIX_SPAWN_RESETIDS", header: "<spawn.h>".}: cint
var POSIX_SPAWN_SETPGROUP* {.importc: "POSIX_SPAWN_SETPGROUP", header: "<spawn.h>".}: cint
var POSIX_SPAWN_SETSCHEDPARAM* {.importc: "POSIX_SPAWN_SETSCHEDPARAM", header: "<spawn.h>".}: cint
var POSIX_SPAWN_SETSCHEDULER* {.importc: "POSIX_SPAWN_SETSCHEDULER", header: "<spawn.h>".}: cint
var POSIX_SPAWN_SETSIGDEF* {.importc: "POSIX_SPAWN_SETSIGDEF", header: "<spawn.h>".}: cint
var POSIX_SPAWN_SETSIGMASK* {.importc: "POSIX_SPAWN_SETSIGMASK", header: "<spawn.h>".}: cint

# <stdio.h>
var IOFBF* {.importc: "_IOFBF", header: "<stdio.h>".}: cint
var IONBF* {.importc: "_IONBF", header: "<stdio.h>".}: cint

# <time.h>
var CLOCKS_PER_SEC* {.importc: "CLOCKS_PER_SEC", header: "<time.h>".}: clong
var CLOCK_PROCESS_CPUTIME_ID* {.importc: "CLOCK_PROCESS_CPUTIME_ID", header: "<time.h>".}: cint
var CLOCK_THREAD_CPUTIME_ID* {.importc: "CLOCK_THREAD_CPUTIME_ID", header: "<time.h>".}: cint
var CLOCK_REALTIME* {.importc: "CLOCK_REALTIME", header: "<time.h>".}: cint
var TIMER_ABSTIME* {.importc: "TIMER_ABSTIME", header: "<time.h>".}: cint
var CLOCK_MONOTONIC* {.importc: "CLOCK_MONOTONIC", header: "<time.h>".}: cint

# <unistd.h>
var POSIX_ASYNC_IO* {.importc: "_POSIX_ASYNC_IO", header: "<unistd.h>".}: cint
var POSIX_PRIO_IO* {.importc: "_POSIX_PRIO_IO", header: "<unistd.h>".}: cint
var POSIX_SYNC_IO* {.importc: "_POSIX_SYNC_IO", header: "<unistd.h>".}: cint
var F_OK* {.importc: "F_OK", header: "<unistd.h>".}: cint
var R_OK* {.importc: "R_OK", header: "<unistd.h>".}: cint
var W_OK* {.importc: "W_OK", header: "<unistd.h>".}: cint
var X_OK* {.importc: "X_OK", header: "<unistd.h>".}: cint
var CS_PATH* {.importc: "_CS_PATH", header: "<unistd.h>".}: cint
var CS_POSIX_V6_ILP32_OFF32_CFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFF32_CFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_ILP32_OFF32_LDFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFF32_LDFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_ILP32_OFF32_LIBS* {.importc: "_CS_POSIX_V6_ILP32_OFF32_LIBS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_ILP32_OFFBIG_CFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_ILP32_OFFBIG_LIBS* {.importc: "_CS_POSIX_V6_ILP32_OFFBIG_LIBS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_LP64_OFF64_CFLAGS* {.importc: "_CS_POSIX_V6_LP64_OFF64_CFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_LP64_OFF64_LDFLAGS* {.importc: "_CS_POSIX_V6_LP64_OFF64_LDFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_LP64_OFF64_LIBS* {.importc: "_CS_POSIX_V6_LP64_OFF64_LIBS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS* {.importc: "_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS* {.importc: "_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_LPBIG_OFFBIG_LIBS* {.importc: "_CS_POSIX_V6_LPBIG_OFFBIG_LIBS", header: "<unistd.h>".}: cint
var CS_POSIX_V6_WIDTH_RESTRICTED_ENVS* {.importc: "_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS", header: "<unistd.h>".}: cint
var F_LOCK* {.importc: "F_LOCK", header: "<unistd.h>".}: cint
var F_TEST* {.importc: "F_TEST", header: "<unistd.h>".}: cint
var F_TLOCK* {.importc: "F_TLOCK", header: "<unistd.h>".}: cint
var F_ULOCK* {.importc: "F_ULOCK", header: "<unistd.h>".}: cint
var PC_2_SYMLINKS* {.importc: "_PC_2_SYMLINKS", header: "<unistd.h>".}: cint
var PC_ALLOC_SIZE_MIN* {.importc: "_PC_ALLOC_SIZE_MIN", header: "<unistd.h>".}: cint
var PC_ASYNC_IO* {.importc: "_PC_ASYNC_IO", header: "<unistd.h>".}: cint
var PC_CHOWN_RESTRICTED* {.importc: "_PC_CHOWN_RESTRICTED", header: "<unistd.h>".}: cint
var PC_FILESIZEBITS* {.importc: "_PC_FILESIZEBITS", header: "<unistd.h>".}: cint
var PC_LINK_MAX* {.importc: "_PC_LINK_MAX", header: "<unistd.h>".}: cint
var PC_MAX_CANON* {.importc: "_PC_MAX_CANON", header: "<unistd.h>".}: cint
var PC_MAX_INPUT* {.importc: "_PC_MAX_INPUT", header: "<unistd.h>".}: cint
var PC_NAME_MAX* {.importc: "_PC_NAME_MAX", header: "<unistd.h>".}: cint
var PC_NO_TRUNC* {.importc: "_PC_NO_TRUNC", header: "<unistd.h>".}: cint
var PC_PATH_MAX* {.importc: "_PC_PATH_MAX", header: "<unistd.h>".}: cint
var PC_PIPE_BUF* {.importc: "_PC_PIPE_BUF", header: "<unistd.h>".}: cint
var PC_PRIO_IO* {.importc: "_PC_PRIO_IO", header: "<unistd.h>".}: cint
var PC_REC_INCR_XFER_SIZE* {.importc: "_PC_REC_INCR_XFER_SIZE", header: "<unistd.h>".}: cint
var PC_REC_MIN_XFER_SIZE* {.importc: "_PC_REC_MIN_XFER_SIZE", header: "<unistd.h>".}: cint
var PC_REC_XFER_ALIGN* {.importc: "_PC_REC_XFER_ALIGN", header: "<unistd.h>".}: cint
var PC_SYMLINK_MAX* {.importc: "_PC_SYMLINK_MAX", header: "<unistd.h>".}: cint
var PC_SYNC_IO* {.importc: "_PC_SYNC_IO", header: "<unistd.h>".}: cint
var PC_VDISABLE* {.importc: "_PC_VDISABLE", header: "<unistd.h>".}: cint
var SC_2_C_BIND* {.importc: "_SC_2_C_BIND", header: "<unistd.h>".}: cint
var SC_2_C_DEV* {.importc: "_SC_2_C_DEV", header: "<unistd.h>".}: cint
var SC_2_CHAR_TERM* {.importc: "_SC_2_CHAR_TERM", header: "<unistd.h>".}: cint
var SC_2_FORT_DEV* {.importc: "_SC_2_FORT_DEV", header: "<unistd.h>".}: cint
var SC_2_FORT_RUN* {.importc: "_SC_2_FORT_RUN", header: "<unistd.h>".}: cint
var SC_2_LOCALEDEF* {.importc: "_SC_2_LOCALEDEF", header: "<unistd.h>".}: cint
var SC_2_PBS* {.importc: "_SC_2_PBS", header: "<unistd.h>".}: cint
var SC_2_PBS_ACCOUNTING* {.importc: "_SC_2_PBS_ACCOUNTING", header: "<unistd.h>".}: cint
var SC_2_PBS_CHECKPOINT* {.importc: "_SC_2_PBS_CHECKPOINT", header: "<unistd.h>".}: cint
var SC_2_PBS_LOCATE* {.importc: "_SC_2_PBS_LOCATE", header: "<unistd.h>".}: cint
var SC_2_PBS_MESSAGE* {.importc: "_SC_2_PBS_MESSAGE", header: "<unistd.h>".}: cint
var SC_2_PBS_TRACK* {.importc: "_SC_2_PBS_TRACK", header: "<unistd.h>".}: cint
var SC_2_SW_DEV* {.importc: "_SC_2_SW_DEV", header: "<unistd.h>".}: cint
var SC_2_UPE* {.importc: "_SC_2_UPE", header: "<unistd.h>".}: cint
var SC_2_VERSION* {.importc: "_SC_2_VERSION", header: "<unistd.h>".}: cint
var SC_ADVISORY_INFO* {.importc: "_SC_ADVISORY_INFO", header: "<unistd.h>".}: cint
var SC_AIO_LISTIO_MAX* {.importc: "_SC_AIO_LISTIO_MAX", header: "<unistd.h>".}: cint
var SC_AIO_MAX* {.importc: "_SC_AIO_MAX", header: "<unistd.h>".}: cint
var SC_AIO_PRIO_DELTA_MAX* {.importc: "_SC_AIO_PRIO_DELTA_MAX", header: "<unistd.h>".}: cint
var SC_ARG_MAX* {.importc: "_SC_ARG_MAX", header: "<unistd.h>".}: cint
var SC_ASYNCHRONOUS_IO* {.importc: "_SC_ASYNCHRONOUS_IO", header: "<unistd.h>".}: cint
var SC_ATEXIT_MAX* {.importc: "_SC_ATEXIT_MAX", header: "<unistd.h>".}: cint
var SC_BARRIERS* {.importc: "_SC_BARRIERS", header: "<unistd.h>".}: cint
var SC_BC_BASE_MAX* {.importc: "_SC_BC_BASE_MAX", header: "<unistd.h>".}: cint
var SC_BC_DIM_MAX* {.importc: "_SC_BC_DIM_MAX", header: "<unistd.h>".}: cint
var SC_BC_SCALE_MAX* {.importc: "_SC_BC_SCALE_MAX", header: "<unistd.h>".}: cint
var SC_BC_STRING_MAX* {.importc: "_SC_BC_STRING_MAX", header: "<unistd.h>".}: cint
var SC_CHILD_MAX* {.importc: "_SC_CHILD_MAX", header: "<unistd.h>".}: cint
var SC_CLK_TCK* {.importc: "_SC_CLK_TCK", header: "<unistd.h>".}: cint
var SC_CLOCK_SELECTION* {.importc: "_SC_CLOCK_SELECTION", header: "<unistd.h>".}: cint
var SC_COLL_WEIGHTS_MAX* {.importc: "_SC_COLL_WEIGHTS_MAX", header: "<unistd.h>".}: cint
var SC_CPUTIME* {.importc: "_SC_CPUTIME", header: "<unistd.h>".}: cint
var SC_DELAYTIMER_MAX* {.importc: "_SC_DELAYTIMER_MAX", header: "<unistd.h>".}: cint
var SC_EXPR_NEST_MAX* {.importc: "_SC_EXPR_NEST_MAX", header: "<unistd.h>".}: cint
var SC_FSYNC* {.importc: "_SC_FSYNC", header: "<unistd.h>".}: cint
var SC_GETGR_R_SIZE_MAX* {.importc: "_SC_GETGR_R_SIZE_MAX", header: "<unistd.h>".}: cint
var SC_GETPW_R_SIZE_MAX* {.importc: "_SC_GETPW_R_SIZE_MAX", header: "<unistd.h>".}: cint
var SC_HOST_NAME_MAX* {.importc: "_SC_HOST_NAME_MAX", header: "<unistd.h>".}: cint
var SC_IOV_MAX* {.importc: "_SC_IOV_MAX", header: "<unistd.h>".}: cint
var SC_IPV6* {.importc: "_SC_IPV6", header: "<unistd.h>".}: cint
var SC_JOB_CONTROL* {.importc: "_SC_JOB_CONTROL", header: "<unistd.h>".}: cint
var SC_LINE_MAX* {.importc: "_SC_LINE_MAX", header: "<unistd.h>".}: cint
var SC_LOGIN_NAME_MAX* {.importc: "_SC_LOGIN_NAME_MAX", header: "<unistd.h>".}: cint
var SC_MAPPED_FILES* {.importc: "_SC_MAPPED_FILES", header: "<unistd.h>".}: cint
var SC_MEMLOCK* {.importc: "_SC_MEMLOCK", header: "<unistd.h>".}: cint
var SC_MEMLOCK_RANGE* {.importc: "_SC_MEMLOCK_RANGE", header: "<unistd.h>".}: cint
var SC_MEMORY_PROTECTION* {.importc: "_SC_MEMORY_PROTECTION", header: "<unistd.h>".}: cint
var SC_MESSAGE_PASSING* {.importc: "_SC_MESSAGE_PASSING", header: "<unistd.h>".}: cint
var SC_MONOTONIC_CLOCK* {.importc: "_SC_MONOTONIC_CLOCK", header: "<unistd.h>".}: cint
var SC_MQ_OPEN_MAX* {.importc: "_SC_MQ_OPEN_MAX", header: "<unistd.h>".}: cint
var SC_MQ_PRIO_MAX* {.importc: "_SC_MQ_PRIO_MAX", header: "<unistd.h>".}: cint
var SC_NGROUPS_MAX* {.importc: "_SC_NGROUPS_MAX", header: "<unistd.h>".}: cint
var SC_OPEN_MAX* {.importc: "_SC_OPEN_MAX", header: "<unistd.h>".}: cint
var SC_PAGESIZE* {.importc: "_SC_PAGESIZE", header: "<unistd.h>".}: cint
var SC_PRIORITIZED_IO* {.importc: "_SC_PRIORITIZED_IO", header: "<unistd.h>".}: cint
var SC_PRIORITY_SCHEDULING* {.importc: "_SC_PRIORITY_SCHEDULING", header: "<unistd.h>".}: cint
var SC_RAW_SOCKETS* {.importc: "_SC_RAW_SOCKETS", header: "<unistd.h>".}: cint
var SC_RE_DUP_MAX* {.importc: "_SC_RE_DUP_MAX", header: "<unistd.h>".}: cint
var SC_READER_WRITER_LOCKS* {.importc: "_SC_READER_WRITER_LOCKS", header: "<unistd.h>".}: cint
var SC_REALTIME_SIGNALS* {.importc: "_SC_REALTIME_SIGNALS", header: "<unistd.h>".}: cint
var SC_REGEXP* {.importc: "_SC_REGEXP", header: "<unistd.h>".}: cint
var SC_RTSIG_MAX* {.importc: "_SC_RTSIG_MAX", header: "<unistd.h>".}: cint
var SC_SAVED_IDS* {.importc: "_SC_SAVED_IDS", header: "<unistd.h>".}: cint
var SC_SEM_NSEMS_MAX* {.importc: "_SC_SEM_NSEMS_MAX", header: "<unistd.h>".}: cint
var SC_SEM_VALUE_MAX* {.importc: "_SC_SEM_VALUE_MAX", header: "<unistd.h>".}: cint
var SC_SEMAPHORES* {.importc: "_SC_SEMAPHORES", header: "<unistd.h>".}: cint
var SC_SHARED_MEMORY_OBJECTS* {.importc: "_SC_SHARED_MEMORY_OBJECTS", header: "<unistd.h>".}: cint
var SC_SHELL* {.importc: "_SC_SHELL", header: "<unistd.h>".}: cint
var SC_SIGQUEUE_MAX* {.importc: "_SC_SIGQUEUE_MAX", header: "<unistd.h>".}: cint
var SC_SPAWN* {.importc: "_SC_SPAWN", header: "<unistd.h>".}: cint
var SC_SPIN_LOCKS* {.importc: "_SC_SPIN_LOCKS", header: "<unistd.h>".}: cint
var SC_SPORADIC_SERVER* {.importc: "_SC_SPORADIC_SERVER", header: "<unistd.h>".}: cint
var SC_SS_REPL_MAX* {.importc: "_SC_SS_REPL_MAX", header: "<unistd.h>".}: cint
var SC_STREAM_MAX* {.importc: "_SC_STREAM_MAX", header: "<unistd.h>".}: cint
var SC_SYMLOOP_MAX* {.importc: "_SC_SYMLOOP_MAX", header: "<unistd.h>".}: cint
var SC_SYNCHRONIZED_IO* {.importc: "_SC_SYNCHRONIZED_IO", header: "<unistd.h>".}: cint
var SC_THREAD_ATTR_STACKADDR* {.importc: "_SC_THREAD_ATTR_STACKADDR", header: "<unistd.h>".}: cint
var SC_THREAD_ATTR_STACKSIZE* {.importc: "_SC_THREAD_ATTR_STACKSIZE", header: "<unistd.h>".}: cint
var SC_THREAD_CPUTIME* {.importc: "_SC_THREAD_CPUTIME", header: "<unistd.h>".}: cint
var SC_THREAD_DESTRUCTOR_ITERATIONS* {.importc: "_SC_THREAD_DESTRUCTOR_ITERATIONS", header: "<unistd.h>".}: cint
var SC_THREAD_KEYS_MAX* {.importc: "_SC_THREAD_KEYS_MAX", header: "<unistd.h>".}: cint
var SC_THREAD_PRIO_INHERIT* {.importc: "_SC_THREAD_PRIO_INHERIT", header: "<unistd.h>".}: cint
var SC_THREAD_PRIO_PROTECT* {.importc: "_SC_THREAD_PRIO_PROTECT", header: "<unistd.h>".}: cint
var SC_THREAD_PRIORITY_SCHEDULING* {.importc: "_SC_THREAD_PRIORITY_SCHEDULING", header: "<unistd.h>".}: cint
var SC_THREAD_PROCESS_SHARED* {.importc: "_SC_THREAD_PROCESS_SHARED", header: "<unistd.h>".}: cint
var SC_THREAD_SAFE_FUNCTIONS* {.importc: "_SC_THREAD_SAFE_FUNCTIONS", header: "<unistd.h>".}: cint
var SC_THREAD_SPORADIC_SERVER* {.importc: "_SC_THREAD_SPORADIC_SERVER", header: "<unistd.h>".}: cint
var SC_THREAD_STACK_MIN* {.importc: "_SC_THREAD_STACK_MIN", header: "<unistd.h>".}: cint
var SC_THREAD_THREADS_MAX* {.importc: "_SC_THREAD_THREADS_MAX", header: "<unistd.h>".}: cint
var SC_THREADS* {.importc: "_SC_THREADS", header: "<unistd.h>".}: cint
var SC_TIMEOUTS* {.importc: "_SC_TIMEOUTS", header: "<unistd.h>".}: cint
var SC_TIMER_MAX* {.importc: "_SC_TIMER_MAX", header: "<unistd.h>".}: cint
var SC_TIMERS* {.importc: "_SC_TIMERS", header: "<unistd.h>".}: cint
var SC_TRACE* {.importc: "_SC_TRACE", header: "<unistd.h>".}: cint
var SC_TRACE_EVENT_FILTER* {.importc: "_SC_TRACE_EVENT_FILTER", header: "<unistd.h>".}: cint
var SC_TRACE_EVENT_NAME_MAX* {.importc: "_SC_TRACE_EVENT_NAME_MAX", header: "<unistd.h>".}: cint
var SC_TRACE_INHERIT* {.importc: "_SC_TRACE_INHERIT", header: "<unistd.h>".}: cint
var SC_TRACE_LOG* {.importc: "_SC_TRACE_LOG", header: "<unistd.h>".}: cint
var SC_TRACE_NAME_MAX* {.importc: "_SC_TRACE_NAME_MAX", header: "<unistd.h>".}: cint
var SC_TRACE_SYS_MAX* {.importc: "_SC_TRACE_SYS_MAX", header: "<unistd.h>".}: cint
var SC_TRACE_USER_EVENT_MAX* {.importc: "_SC_TRACE_USER_EVENT_MAX", header: "<unistd.h>".}: cint
var SC_TTY_NAME_MAX* {.importc: "_SC_TTY_NAME_MAX", header: "<unistd.h>".}: cint
var SC_TYPED_MEMORY_OBJECTS* {.importc: "_SC_TYPED_MEMORY_OBJECTS", header: "<unistd.h>".}: cint
var SC_TZNAME_MAX* {.importc: "_SC_TZNAME_MAX", header: "<unistd.h>".}: cint
var SC_V6_ILP32_OFF32* {.importc: "_SC_V6_ILP32_OFF32", header: "<unistd.h>".}: cint
var SC_V6_ILP32_OFFBIG* {.importc: "_SC_V6_ILP32_OFFBIG", header: "<unistd.h>".}: cint
var SC_V6_LP64_OFF64* {.importc: "_SC_V6_LP64_OFF64", header: "<unistd.h>".}: cint
var SC_V6_LPBIG_OFFBIG* {.importc: "_SC_V6_LPBIG_OFFBIG", header: "<unistd.h>".}: cint
var SC_VERSION* {.importc: "_SC_VERSION", header: "<unistd.h>".}: cint
var SC_XBS5_ILP32_OFF32* {.importc: "_SC_XBS5_ILP32_OFF32", header: "<unistd.h>".}: cint
var SC_XBS5_ILP32_OFFBIG* {.importc: "_SC_XBS5_ILP32_OFFBIG", header: "<unistd.h>".}: cint
var SC_XBS5_LP64_OFF64* {.importc: "_SC_XBS5_LP64_OFF64", header: "<unistd.h>".}: cint
var SC_XBS5_LPBIG_OFFBIG* {.importc: "_SC_XBS5_LPBIG_OFFBIG", header: "<unistd.h>".}: cint
var SC_XOPEN_CRYPT* {.importc: "_SC_XOPEN_CRYPT", header: "<unistd.h>".}: cint
var SC_XOPEN_ENH_I18N* {.importc: "_SC_XOPEN_ENH_I18N", header: "<unistd.h>".}: cint
var SC_XOPEN_LEGACY* {.importc: "_SC_XOPEN_LEGACY", header: "<unistd.h>".}: cint
var SC_XOPEN_REALTIME* {.importc: "_SC_XOPEN_REALTIME", header: "<unistd.h>".}: cint
var SC_XOPEN_REALTIME_THREADS* {.importc: "_SC_XOPEN_REALTIME_THREADS", header: "<unistd.h>".}: cint
var SC_XOPEN_SHM* {.importc: "_SC_XOPEN_SHM", header: "<unistd.h>".}: cint
var SC_XOPEN_STREAMS* {.importc: "_SC_XOPEN_STREAMS", header: "<unistd.h>".}: cint
var SC_XOPEN_UNIX* {.importc: "_SC_XOPEN_UNIX", header: "<unistd.h>".}: cint
var SC_XOPEN_VERSION* {.importc: "_SC_XOPEN_VERSION", header: "<unistd.h>".}: cint
var SC_NPROCESSORS_ONLN* {.importc: "_SC_NPROCESSORS_ONLN", header: "<unistd.h>".}: cint
var SEEK_SET* {.importc: "SEEK_SET", header: "<unistd.h>".}: cint
var SEEK_CUR* {.importc: "SEEK_CUR", header: "<unistd.h>".}: cint
var SEEK_END* {.importc: "SEEK_END", header: "<unistd.h>".}: cint

